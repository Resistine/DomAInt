{"version":3,"file":"./src/content.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://domaint/./src/content.js"],"sourcesContent":["/*let ifrm = document.createElement('iframe');\nifrm.setAttribute('id', 'ifrm'); // assign an id\nifrm.setAttribute('src', 'afterClosePopup.html');\ndocument.body.appendChild(ifrm);\n*/\n\n /**\n       * showPopup function creates an iframe html element and inserts the actual html popup\n       * from web accessible resources in it\n       */\n\n\nfunction showPopup() {\n  // Avoid recursive frame insertion...\n  let extensionOrigin = \"chrome-extension://\" + chrome.runtime.id;\n    let iframe = document.createElement(\"iframe\");\n    // Must be declared at web_accessible_resources in manifest.json\n    iframe.src = chrome.runtime.getURL(\"/assets/html/afterClosePopup.html\");\n    iframe.setAttribute(\"id\", \"iframe\");\n    document.body.appendChild(iframe);\n\n    // iframe styling\n    iframe.style.cssText =\n      \"position:fixed;top:15px;right:15px;display:block;\" +\n      \"width:300px;height:170px;z-index:9999;\" +\n      \"border-radius:10px;\";\n\n    // remove popup automatically after 15 seconds\n    \n      setTimeout(() => {\n        removePopup();\n      }, 15000)\n      \n}\n\n/**\n       * function removePopup gets the iframe element by its id and then removes it\n       */\n\nfunction removePopup() {\n  let popup = document.getElementById(\"iframe\");\n  if(popup){\n  document.body.removeChild(popup);\n  }\n}\n\n/**\n       * On message listener that listens for show popup message, send whenever a site is closed by autoclose\n       * calls the show popup function and then sends response back\n       *  @param {object} request = used to check for the show popup message\n       * @param {function} sendResponse used for callback\n       * @returns {Promise} Response message\n       */\nchrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {\n  if (request.data === \"show_popup\") {\n        showPopup();\n  }\n  return Promise.resolve(request.closedUrl);\n});\n\n/**\n       * On message listener that listens for remove popup message, this message is send with the cross button on the iframe\n       * calls the removePopup function and then sends response back\n       * @param {object} request = used to check for the remove popup message\n       * @param {function} sendResponse used for callback\n       * @returns {Promise} Response message\n       */\n\nchrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {\n  if (request.msg === \"remove_popup\") {\n        removePopup();\n     \n  }\n  return Promise.resolve(request.closedUrl);\n});\n"],"names":[],"sourceRoot":""}